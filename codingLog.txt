24/01/25
---------------------
환경설정
Laravel Project 생성 
php v8.2.15
lalabel 10.42.0
composer 2.6.6
---------------------

리마인드 과정

목표는 라라벨 MVC 패턴을 통해 CRUD 기능이 들어간 게시판을 생성한 것이다.
만든 과정을 다시 살펴보자.

처음에 스프링 환경만 다루다 보니 , 
환경설정이 매우 어려웠다. 우선은
환경설정 후에, 

1. 프로젝트 생성 : composer create-project --prefer-dist laravel/laravel board_crud

2. 생성 후, 프로젝트 폴더로 이동한다. cd board_crud

3. 데이터 베이스 설정을 한다. .env 파일에서 설정을 확인한다. 
나같은 경우에는 
--------------------------
DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=laravel
DB_USERNAME=root
DB_PASSWORD=
--------------------------
비번은 따로 설정 안했다. 그 뒤로는 마이그레이션을 생성한다. 
마이그레이션(migration) 이란 ? 라라벨 자체에서 DB Table을 생성하는
migration기능이다. 스키마를 버전 관리하고 업데이트 하기 위한 라라벨만의 도구이다.
마이그레이션은 데이터베이스 테이블을 '생성','수정'또는'삭제' 하는 등의 스키마 변경을
쉽게 관리할 수 있게 해준다.

한마디로 마이그레이션은 주로 데이터베이스의 테이블을 생성하거나, 수정할 때 사용된다.
개발자가 특정 기능을 추가하거나 변경할 때마다, 마이그레이션 파일을 생성하고 실행하여
데이터베이스의 스카미를 업데이트 할 수 있다. 실행은 php artisan migrate 명령어를 사용.
:를 붙여서 rollback이나, status를 사용하여, 롤백하거나 상태를 확인할 수 있다. 

그래서 php artisan make:migration create_posts_table 명령어로 마이그레이션을 하나 생성함.
생성한 후, database/migration에 있는 create_posts_table파일에 들어가서 수정을 좀 해준다. 

posts라는 테이블을 생성하는 마이그레이션을 정의하고 있다. 

use Illuminate\Database\Migrations\Migration;
use Illuminate\Database\Schema\Blueprint;
use Illuminate\Support\Facades\Schema;

// 'posts' 테이블을 생성하는 마이그레이션 클래스
class CreatePostsTable extends Migration
{
    /**
     * Run the migrations.
     * 마이그레이션을 실행할 때 호출되는 메소드
     */
    public function up(): void
    {
        // 'posts' 테이블 생성
        Schema::create('posts', function (Blueprint $table) {
            // 'id' 컬럼: 일반적으로 자동으로 증가하는 기본 키(primary key)로 사용
            $table->id();

            // 'title' 컬럼: 문자열 형식의 제목
            $table->string('title');

            // 'content' 컬럼: 긴 텍스트 형식의 내용
            $table->text('content');

            // 'timestamps' 컬럼: 레코드의 생성 및 갱신 시간을 기록하기 위한 Laravel의 기능
            $table->timestamps();
        });
    }

    /**
     * Reverse the migrations.
     * 마이그레이션을 롤백할 때 호출되는 메소드
     */
    public function down(): void
    {
        // 'posts' 테이블 삭제
        Schema::dropIfExists('posts');
    }
}

이 마이그레이션에서 'up'메소드는 posts 테이블을 생성하고, 'down'메서드는 posts테이블을 삭제한다.
'posts' 테이블은 'id','title','content',timestamps'라는 네 가지 칼럼으로 이루어져있다.
'id'는 기본키이며, 자동으로 증가하는 역할을 한다. 'title'은 문자열 형식의 제목을 저장하고,
'content'는 긴 텍스트 형식의 내용을 저장한다. 'timestamps'는 레코드가 생성되거나, 갱신된 시간을
기록하기 위한 라라벨의 기능이다. 오케이?

설정이 이렇게 다 끝났으면, 마이그레이션을 실행한다. 명령어는 php artisan migrate
이렇게 마이그레이션 세팅이 완료 되었으면.. MVC패턴에 의거해서 모델과 컨트롤러를 생성해준다.

우선 모델과 컨트롤러를 각각 생성하는 명령어를 적어본다.
php artisan make:model Post
php artisan make:controller PostController 

이렇게 생성하면 컨트롤러는 http폴더 하단 컨트롤러 폴더에 파일이 생성되고, 
모델은 models라는 폴더에 모델 파일이 생성된다. 

아 개피곤하다.. 9번 라우트 설정부터 내일 다시하자...